//
// Generated file, do not edit! Created by opp_msgc 4.3 from darknetmessage.msg.
//

#ifndef _DARKNETMESSAGE_M_H_
#define _DARKNETMESSAGE_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0403
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
enum DarknetMessageType {
    DM_UNKNOWN = 0,
    DM_OTHER = 1,
    
    
    DM_REQUEST = 10,
    DM_RESPONSE = 11,
    
    
    DM_CON_SYN = 20,
    DM_CON_ACK = 21,
    
    DM_RCVACK = 25,
    
    DM_FORWARD = 30
};
// }}



/**
 * Class generated from <tt>darknetmessage.msg</tt> by opp_msgc.
 * <pre>
 * packet DarknetMessage {
 *     @customize(true);  
 *     string destNodeID;
 *     string srcNodeID;
 *     int TTL = 32;
 *     DarknetMessageType type;
 *     long requestMessageID; 
 * }
 * </pre>
 *
 * DarknetMessage_Base is only useful if it gets subclassed, and DarknetMessage is derived from it.
 * The minimum code to be written for DarknetMessage is the following:
 *
 * <pre>
 * class DarknetMessage : public DarknetMessage_Base
 * {
 *   private:
 *     void copy(const DarknetMessage& other) { ... }

 *   public:
 *     DarknetMessage(const char *name=NULL, int kind=0) : DarknetMessage_Base(name,kind) {}
 *     DarknetMessage(const DarknetMessage& other) : DarknetMessage_Base(other) {copy(other);}
 *     DarknetMessage& operator=(const DarknetMessage& other) {if (this==&other) return *this; DarknetMessage_Base::operator=(other); copy(other); return *this;}
 *     virtual DarknetMessage *dup() const {return new DarknetMessage(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from DarknetMessage_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(DarknetMessage);
 * </pre>
 */
class DarknetMessage_Base : public ::cPacket
{
  protected:
    opp_string destNodeID_var;
    opp_string srcNodeID_var;
    int TTL_var;
    DarknetMessageType type_var;
    long requestMessageID_var;

  private:
    void copy(const DarknetMessage_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DarknetMessage_Base&);
    // make constructors protected to avoid instantiation
    DarknetMessage_Base(const char *name=NULL, int kind=0);
    DarknetMessage_Base(const DarknetMessage_Base& other);
    // make assignment operator protected to force the user override it
    DarknetMessage_Base& operator=(const DarknetMessage_Base& other);

  public:
    virtual ~DarknetMessage_Base();
    virtual DarknetMessage_Base *dup() const {throw cRuntimeError("You forgot to manually add a dup() function to class DarknetMessage");}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getDestNodeID() const;
    virtual void setDestNodeID(const char * destNodeID);
    virtual const char * getSrcNodeID() const;
    virtual void setSrcNodeID(const char * srcNodeID);
    virtual int getTTL() const;
    virtual void setTTL(int TTL);
    virtual DarknetMessageType& getType();
    virtual const DarknetMessageType& getType() const {return const_cast<DarknetMessage_Base*>(this)->getType();}
    virtual void setType(const DarknetMessageType& type);
    virtual long getRequestMessageID() const;
    virtual void setRequestMessageID(long requestMessageID);
};


#endif // _DARKNETMESSAGE_M_H_
